# My first Website: 
# First thing: install Django:
pip install django
# Check the version of django
$ python -m django --version

$ django-admin startproject mysite
# This will create a mysite directory in your current directory.
# Let’s look at what startproject created:
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py

# These files are:
•	The outer mysite/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.
•	manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.
•	The inner mysite/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
•	mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.
•	mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.
•	mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.
•	mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
•	mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.


# The development server
# Let’s verify your Django project works. Change into the outer mysite directory, if you haven’t already, and run the following commands:
$ python manage.py runserver

# You’ll see the following output on the command line:
(Tej) PS C:\Users\TejYadav\Desktop\tf\mysite> python manage.py runserver                        
Watching for file changes with StatReloader
Performing system checks...
System check identified no issues (0 silenced).
You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
July 01, 2020 - 12:43:46
Django version 3.0.3, using settings 'mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

# Now that the server’s running, visit http://127.0.0.1:8000/ with your Web browser. You’ll see a “Congratulations!” page, with a rocket taking off. It worked!
 

# Changing the port
# By default, the runserver command starts the development server on the internal IP at port 8000.
# If you want to change the server’s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:
py manage.py runserver 8080
# If you want to change the server’s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:
py manage.py runserver 0:8000

# 0 is a shortcut for 0.0.0.0. Full docs for the development server can be found in the runserver reference.

# To create your app, make sure you’re in the same directory as manage.py and type this command:
py manage.py startapp polls

# That’ll create a directory polls, which is laid out like this:
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

# Write your first view
Let’s write the first view. Open the file polls/views.py and put the following Python code in it:
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

# This is the simplest view possible in Django. To call the view, we need to map it to a URL - and for this we need a URLconf.
# To create a URLconf in the polls directory, create a file called urls.py. Your app directory should now look like:
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py

# In the polls/urls.py file include the following code:
polls/urls.py
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

# To create a URLconf in the polls directory, create a file called urls.py. Your app directory should now look like:
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py

# The next step is to point the root URLconf at the polls.urls module. In mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns list, so you have:
mysite/urls.py

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]
# The include() function allows referencing other URLconfs. Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.
# The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py), they can be placed under “/polls/”, or under “/fun_polls/”, or under “/content/polls/”, or any other path root, and the app will still work.
# When to use include()
# You should always use include() when you include other URL patterns. admin.site.urls is the only exception to this.
# You have now wired an index view into the URLconf. Verify it’s working with the following command:
py manage.py runserver

# Go to http://localhost:8000/polls/ in your browser, and you should see the text “Hello, world. You’re at the polls index.”, which you defined in the index view.
